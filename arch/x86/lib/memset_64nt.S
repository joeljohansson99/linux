/* SPDX-License-Identifier: GPL-2.0 */
/* Copyright 2002 Andi Kleen, SuSE Labs */

#include <linux/export.h>
#include <linux/linkage.h>
#include <asm/cpufeatures.h>
#include <asm/alternative.h>

.section .noinstr.text, "ax"

SYM_FUNC_START(memset_nt)
	movq %rdi,%r10

	/* expand byte value  */
	movzbl %sil,%ecx
	movabs $0x0101010101010101,%rax
	imulq  %rcx,%rax
	movq %mm0,%rax

	/* align dst */
	movl  %edi,%r9d
	andl  $7,%r9d
	jnz  .Lbad_alignment
	cmpq $7,%rdx
	jbe	.Lhandle_small

.Lafter_bad_alignment:
	movq  %rdx,%rcx
	shrq  $6,%rcx
	jz	 .Lhandle_tail

	.p2align 4
.Lloop_64:
	decq  %rcx
	movntq  %mm0,(%rdi)
	movntq  %mm0,8(%rdi)
	movntq  %mm0,16(%rdi)
	movntq  %mm0,24(%rdi)
	movntq  %mm0,32(%rdi)
	movntq  %mm0,40(%rdi)
	movntq  %mm0,48(%rdi)
	movntq  %mm0,56(%rdi)
	leaq  64(%rdi),%rdi
	jnz    .Lloop_64

	/* Handle tail in loops. The loops should be faster than hard
	   to predict jump tables. */
	.p2align 4
.Lhandle_tail:
	movl	%edx,%ecx
	andl    $63&(~7),%ecx
	jz 		.Lhandle_7
	shrl	$3,%ecx
	.p2align 4
.Lloop_8:
	decl   %ecx
	movntq %mm0,(%rdi)
	leaq  8(%rdi),%rdi
	jnz    .Lloop_8

.Lhandle_7:
	andl	$7,%edx
	jz      .Lende
	/* Move rdi back to do an unaligned store. */
	movq $8,%r8
	subq %rdx,%r8
	subq %r8,%rdi
	movntq %mm0,(%rdi)	/* unaligned store */

.Lende:
	sfence
	movq	%r10,%rax
	emms
	RET

.Lbad_alignment:
	cmpq $7,%rdx
	jbe	.Lhandle_small
	movntq %mm0,(%rdi)	/* unaligned store */
	movq $8,%r8
	subq %r9,%r8
	addq %r8,%rdi
	subq %r8,%rdx
	jmp .Lafter_bad_alignment

.Lhandle_small:
	andl	$7,%edx
	jz      .Lende
	.p2align 4
.Lloop_1:
	decl    %edx
	movb 	%al,(%rdi) /* not a non-temporal store */
	leaq	1(%rdi),%rdi
	jnz     .Lloop_1
	jmp     .Lende
.Lfinal:
SYM_FUNC_END(memset_nt)
EXPORT_SYMBOL(memset_nt)
